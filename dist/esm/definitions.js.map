{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import { PluginListenerHandle } from '@capacitor/core';\n\nexport interface MediaData {\n    id: string;\n    filePath: string;\n    fileType: string;\n    createdAt: string;\n    updatedAt: string;\n    tags: string;\n    metaData: string;\n    durationMilliseconds: number;\n    remoteId: string;\n    remoteURL: string;\n    transcriptionURL: string;\n    transcriptionLength: number;\n    status: string;\n    progress: number;\n}\n\nexport interface UploadProgressEvent {\n    id: string;\n    progress: string;\n}\n\nexport interface UploadCompleteEventData {\n    id: string;\n    createdDate?: string;\n    remoteId?: string;\n    uploadedFileURL?: string;\n    metaData?: any;\n    tags?: any;\n    transcriptionURL?: string;\n    transcriptionLength?: number;\n    fileType?: string;\n}\n\nexport interface UploadErrorEvent {\n    id: string;\n    error: any;\n}\n\nexport interface UploadCallbacks {\n    onProgress?: (event: UploadProgressEvent) => void;\n    onComplete?: (event: UploadCompleteEventData) => void;\n    onError?: (event: UploadErrorEvent) => void;\n}\n\nexport type MediaEventMap = {\n    onProgress: UploadProgressEvent;\n    onComplete: UploadCompleteEventData;\n    onError: UploadErrorEvent;\n};\n\nexport interface TruvideoSdkMediaPlugin {\n    echo(options: { value: string }): Promise<{ value: string }>;\n\n    // New Methods\n    mediaBuilder(options: {\n        filePath: string;\n        tag: string;\n        metaData: string;\n    }): Promise<{ value: string }>;\n\n    getFileUploadRequestById(options: { id: string }): Promise<string>;\n\n    getAllFileUploadRequests(options: { status: string }): Promise<string>;\n\n    cancelMedia(options: { id: string }): Promise<{ value: string }>;\n\n    deleteMedia(options: { id: string }): Promise<{ value: string }>;\n\n    pauseMedia(options: { id: string }): Promise<{ value: string }>;\n\n    resumeMedia(options: { id: string }): Promise<{ value: string }>;\n\n    uploadMedia(options: { id: string }): Promise<{ value: string }>;\n\n    search(options: {\n        tag: string;\n        type: string;\n        page: string;\n        pageSize: string;\n    }): Promise<{ value: string }>;\n\n    // Event Listeners\n    addListener<K extends keyof MediaEventMap>(\n        eventName: K,\n        listenerFunc: (event: MediaEventMap[K]) => void\n    ): Promise<PluginListenerHandle>;\n}\n"]}