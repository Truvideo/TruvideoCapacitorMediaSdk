{"version":3,"file":"media-builder.js","sourceRoot":"","sources":["../../src/media-builder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAa5C,MAAM,OAAO,YAAY;IAavB,YAAY,QAAgB;QAXpB,cAAS,GAAwB,IAAI,GAAG,EAAE,CAAC;QAC3C,SAAI,GAAwB,IAAI,GAAG,EAAE,CAAC;QAEtC,cAAS,GAA2B,EAAE,CAAC;QAEvC,cAAS,GAAY,KAAK,CAAC;QAOjC,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IATD,YAAY,CAAC,SAAkB;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAQD,MAAM,CAAC,GAAW,EAAE,KAAa;QAC/B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,WAAW,CAAC,GAAW,EAAE,KAAa;QACpC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,GAAW;QACnB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,GAAW;QACxB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,eAAe,CAAC,GAAwB;QAC9C,MAAM,GAAG,GAA8B,EAAE,CAAC;QAC1C,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAEtE,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC;YACnD,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,GAAG;YACH,QAAQ;YACR,SAAS,EAAG,IAAI,CAAC,SAAS;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACzE,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,GAAG,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACzE,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,GAAG,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACzE,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3E,OAAO,GAAG,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACzE,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,GAAG,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,SAA0B;QACrC,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAEzE,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QAE3C,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,WAAW,CACnD,YAAY,EACZ,CAAC,KAA0B,EAAE,EAAE;YAC7B,IAAI,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC,UAAU,EAAE;gBAC7D,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC7B;QACH,CAAC,CACF,CAAC;QAEF,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,WAAW,CACnD,YAAY,EACZ,CAAC,KAA8B,EAAE,EAAE;YACjC,IAAI,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC,UAAU,EAAE;gBAC7D,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;oBAAE,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACpF,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;oBAAE,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACxE,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC7B;YACD,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC,CACF,CAAC;QAEF,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAChD,SAAS,EACT,CAAC,KAAuB,EAAE,EAAE;YAC1B,IAAI,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC,OAAO,EAAE;gBAC1D,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC1B;YACD,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QAErD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/E,OAAO,MAAM,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IACnC,CAAC;CACF","sourcesContent":["import { TruvideoSdkMedia } from './plugin';\n\nimport { PluginListenerHandle } from '@capacitor/core';\nimport type {\n  UploadCallbacks,\n  UploadCompleteEventData,\n  UploadErrorEvent,\n  UploadProgressEvent,\n  MediaData,\n} from './helper';\n\n\n\nexport class MediaBuilder {\n  private _filePath: string;\n  private _metaData: Map<string, string> = new Map();\n  private _tag: Map<string, string> = new Map();\n  private mediaDetail: MediaData | undefined;\n  private listeners: PluginListenerHandle[] = [];\n  private currentUploadId: string | undefined;\n  private isLibrary: boolean = false;\n\n  setIsLibrary(isLibrary: boolean): MediaBuilder { \n    this.isLibrary = isLibrary; \n    return this; \n  }\n  constructor(filePath: string) {\n    if (!filePath) {\n      throw new Error('filePath is required for MediaBuilder.');\n    }\n    this._filePath = filePath;\n  }\n\n  setTag(key: string, value: string): MediaBuilder {\n    this._tag.set(key, value);\n    return this;\n  }\n\n  getTag(): Map<string, string> {\n    return this._tag;\n  }\n\n  setMetaData(key: string, value: string): MediaBuilder {\n    this._metaData.set(key, value);\n    return this;\n  }\n\n  getMetaData(): Map<string, string> {\n    return this._metaData;\n  }\n\n  clearTags(): MediaBuilder {\n    this._tag.clear();\n    return this;\n  }\n\n  deleteTag(key: string): MediaBuilder {\n    this._tag.delete(key);\n    return this;\n  }\n\n  deleteMetaData(key: string): MediaBuilder {\n    this._metaData.delete(key);\n    return this;\n  }\n\n  clearMetaDatas(): MediaBuilder {\n    this._metaData.clear();\n    return this;\n  }\n\n  private mapToJsonObject(map: Map<string, string>): { [key: string]: string } {\n    const obj: { [key: string]: string } = {};\n    map.forEach((value, key) => {\n      obj[key] = value;\n    });\n    return obj;\n  }\n\n  async build(): Promise<MediaBuilder> {\n    const tag = JSON.stringify(this.mapToJsonObject(this._tag));\n    const metaData = JSON.stringify(this.mapToJsonObject(this._metaData));\n\n    const response = await TruvideoSdkMedia.mediaBuilder({\n      filePath: this._filePath,\n      tag,\n      metaData,\n      isLibrary : this.isLibrary,\n    });\n\n    this.mediaDetail = JSON.parse(response.value);\n    return this;\n  }\n\n  async cancel(): Promise<string> {\n    if (!this.mediaDetail) return Promise.reject('mediaDetail is undefined');\n    const res = await TruvideoSdkMedia.cancelMedia({ id: this.mediaDetail.id });\n    return res.value;\n  }\n\n  async delete(): Promise<string> {\n    if (!this.mediaDetail) return Promise.reject('mediaDetail is undefined');\n    const res = await TruvideoSdkMedia.deleteMedia({ id: this.mediaDetail.id });\n    return res.value;\n  }\n\n  async pause(): Promise<string> {\n    if (!this.mediaDetail) return Promise.reject('mediaDetail is undefined');\n    const res = await TruvideoSdkMedia.pauseMedia({ id: this.mediaDetail.id });\n    return res.value;\n  }\n\n  async resume(): Promise<string> {\n    if (!this.mediaDetail) return Promise.reject('mediaDetail is undefined');\n    const res = await TruvideoSdkMedia.resumeMedia({ id: this.mediaDetail.id });\n    return res.value;\n  }\n\n  async upload(callbacks: UploadCallbacks): Promise<string> {\n    if (!this.mediaDetail) return Promise.reject('mediaDetail is undefined');\n\n    this.removeEventListeners();\n    this.currentUploadId = this.mediaDetail.id;\n\n    const onProgress = await TruvideoSdkMedia.addListener(\n      'onProgress',\n      (event: UploadProgressEvent) => {\n        if (event.id === this.currentUploadId && callbacks.onProgress) {\n          callbacks.onProgress(event);\n        }\n      }\n    );\n\n    const onComplete = await TruvideoSdkMedia.addListener(\n      'onComplete',\n      (event: UploadCompleteEventData) => {\n        if (event.id === this.currentUploadId && callbacks.onComplete) {\n          if (typeof event.metaData === 'string') event.metaData = JSON.parse(event.metaData);\n          if (typeof event.tags === 'string') event.tags = JSON.parse(event.tags);\n          callbacks.onComplete(event);\n        }\n        this.removeEventListeners();\n      }\n    );\n\n    const onError = await TruvideoSdkMedia.addListener(\n      'onError',\n      (event: UploadErrorEvent) => {\n        if (event.id === this.currentUploadId && callbacks.onError) {\n          callbacks.onError(event);\n        }\n        this.removeEventListeners();\n      }\n    );\n\n    this.listeners.push(onProgress, onComplete, onError);\n\n    const result = await TruvideoSdkMedia.uploadMedia({ id: this.mediaDetail.id });\n    return result.value;\n  }\n\n  removeEventListeners(): void {\n    this.listeners.forEach((listener) => listener.remove());\n    this.listeners = [];\n    this.currentUploadId = undefined;\n  }\n}\n"]}