{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../src/helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAuD5C,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,EAAU;IACrD,IAAI,OAAO,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAA;IACxB,IAAI,QAAQ,GAAI,MAAM,gBAAgB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;IACzE,OAAO,mBAAmB,CAAY,QAAQ,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,CAAN,IAAY,mBAQX;AARD,WAAY,mBAAmB;IAC7B,8CAAsB,CAAA;IACtB,oCAAY,CAAA;IACZ,sCAAc,CAAA;IACd,wCAAgB,CAAA;IAChB,8CAAsB,CAAA;IACtB,4CAAoB,CAAA;IACpB,sDAA8B,CAAA;AAChC,CAAC,EARW,mBAAmB,KAAnB,mBAAmB,QAQ9B;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,MAA6B;IACxE,IAAI,MAAM,GAAG,EAAE,MAAM,EAAE,MAAM,IAAI,EAAE,EAAE,CAAA;IACrC,IAAI,QAAQ,GAAI,MAAM,gBAAgB,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACxE,OAAO,mBAAmB,CAAc,QAAQ,CAAC,CAAC;AACtD,CAAC;AAED,IAAK,SAKJ;AALD,WAAK,SAAS;IACZ,4BAAe,CAAA;IACf,4BAAe,CAAA;IACf,4BAAe,CAAA;IACf,wBAAW,CAAA;AACb,CAAC,EALI,SAAS,KAAT,SAAS,QAKb;AAED,MAAM,CAAC,KAAK,UAAU,MAAM,CACpB,GAAuB,EACvB,IAAY,EACZ,SAAmB,EACnB,QAAgB,EAChB,IAAgB;IAGpB,IAAI,OAAO,GAAI;QACX,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;QACxB,IAAI,EAAE,IAAI,IAAK,EAAE;QACjB,SAAS,EAAE,SAAS;QACpB,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;QACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE;KAChC,CAAA;IACD,IAAI,QAAQ,GAAI,MAAM,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvD,OAAO,mBAAmB,CAAc,QAAQ,CAAC,CAAC;AACtD,CAAC;AAED,SAAS,mBAAmB,CAAI,QAAa;IACzC,IAAI,CAAC,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC3C,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACvD;IAED,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,OAAO,QAAQ,CAAC,MAAM,KAAK,QAAQ,EAAE;QACzD,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACnE;IAED,IAAI;QACA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAM,CAAC;KAC3C;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,0CAA0C,GAAG,CAAC,CAAC,CAAC;KACnE;AACL,CAAC","sourcesContent":["import { TruvideoSdkMedia } from \"./plugin\";\n\n\nexport interface MediaData {\n    id: string;\n    filePath: string;\n    fileType: string;\n    createdAt: string;\n    updatedAt: string;\n    tags: string;\n    metaData: string;\n    durationMilliseconds: number;\n    remoteId: string;\n    remoteURL: string;\n    transcriptionURL: string;\n    transcriptionLength: number;\n    status: string;\n    progress: number;\n}\n\nexport interface UploadProgressEvent {\n    id: string;\n    progress: string;\n}\n\nexport interface UploadCompleteEventData {\n    id: string;\n    createdDate?: string;\n    remoteId?: string;\n    uploadedFileURL?: string;\n    metaData?: any;\n    tags?: any;\n    transcriptionURL?: string;\n    transcriptionLength?: number;\n    fileType?: string;\n}\n\nexport interface UploadErrorEvent {\n    id: string;\n    error: any;\n}\n\nexport interface UploadCallbacks {\n    onProgress?: (event: UploadProgressEvent) => void;\n    onComplete?: (event: UploadCompleteEventData) => void;\n    onError?: (event: UploadErrorEvent) => void;\n}\n\nexport type MediaEventMap = {\n    onProgress: UploadProgressEvent;\n    onComplete: UploadCompleteEventData;\n    onError: UploadErrorEvent;\n};\n\n\nexport async function getFileUploadRequestById(id: string ) : Promise<MediaData>{\n    var options = { id: id }\n    var response =  await TruvideoSdkMedia.getFileUploadRequestById(options);\n    return parsePluginResponse<MediaData>(response);\n}\n\nexport enum UploadRequestStatus {\n  UPLOADING =\"UPLOADING\",\n  IDLE =\"IDLE\",\n  ERROR =\"ERROR\",\n  PAUSED =\"PAUSED\",\n  COMPLETED =\"COMPLETED\",\n  CANCELED =\"CANCELED\",\n  SYNCHRONIZING =\"SYNCHRONIZING\",\n}\n\nexport async function getAllFileUploadRequests(status? : UploadRequestStatus) : Promise<MediaData[]>{\n    var option = { status: status || \"\" }\n    var response =  await TruvideoSdkMedia.getAllFileUploadRequests(option);\n    return parsePluginResponse<MediaData[]>(response);\n}\n\nenum MediaType {\n  IMAGE = 'Image',\n  VIDEO = 'Video',\n  AUDIO = 'AUDIO',\n  PDF = 'PDF',\n}\n\nexport async function search(\n        tag: Map<string,string>,\n        page: number,\n        isLibrary : boolean,\n        pageSize: number, \n        type?: MediaType,\n    ) : Promise<MediaData[]>{\n\n    var options =  { \n        tag: JSON.stringify(tag),\n        type: type  || \"\",\n        isLibrary: isLibrary,\n        page: page.toString(),\n        pageSize: pageSize.toString() \n    }\n    var response =  await TruvideoSdkMedia.search(options);\n    return parsePluginResponse<MediaData[]>(response);\n}\n\nfunction parsePluginResponse<T>(response: any): T {\n    if (!response || typeof response !== 'object') {\n        throw new Error(\"Plugin response is not an object\");\n    }\n\n    if (!response.result || typeof response.result !== 'string') {\n        throw new Error(\"Plugin response.result is not a valid string\");\n    }\n\n    try {\n        return JSON.parse(response.result) as T;\n    } catch (e) {\n        throw new Error(\"Failed to parse plugin response.result: \" + e);\n    }\n}\n"]}